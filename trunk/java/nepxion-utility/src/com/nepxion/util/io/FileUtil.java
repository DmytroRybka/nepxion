package com.nepxion.util.io;

/**
 * <p>Title: Nepxion Utility</p>
 * <p>Description: Nepxion Utility Repository</p>
 * <p>Copyright: Copyright (c) 2010</p>
 * <p>Company: Nepxion</p>
 * @author Neptune
 * @email hj_ren@msn.com
 * @version 1.0
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.nepxion.util.encode.EncodeContext;

public class FileUtil
{
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath  the file path
	 * @return          the file string or exception string
	 */
	public static String read(String filePath)
	{
		return read(filePath, EncodeContext.getIOCharset(), false);
	}
	
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string or exception string
	 */
	public static String read(String filePath, boolean classLoader)
	{
		return read(filePath, EncodeContext.getIOCharset(), classLoader);
	}
	
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath  the file path
	 * @param charset   the charset text, example "ISO-8859-1", "UTF-8", "GBK", "GB2312"
	 * @return          the file string or exception string
	 */
	public static String read(String filePath, String charset)
	{
		return read(filePath, charset, false);
	}
	
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath     the file path
	 * @param charset      the charset text, example "ISO-8859-1", "UTF-8", "GBK", "GB2312"
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string or exception string
	 */
	public static String read(String filePath, String charset, boolean classLoader)
	{
		String text = "";
		try
		{
			InputStream inputStream = null;
			if (classLoader)
			{
				inputStream = FileUtil.class.getClassLoader().getResourceAsStream(filePath);
			}
			else
			{
				inputStream = new FileInputStream(filePath);
			}
			
			text = IOUtil.getString(inputStream, charset);
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			text = e.toString();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			text = e.toString();
		}
		return text;
	}
	
	/**
	 * Write the file string.If an exception is caught,the method will return the exception for a string format
	 * @param text      the file text
	 * @param filePath  the file path
	 * @return          exception string or empty string
	 */
	public static String write(String text, String filePath)
	{
		try
		{
			OutputStream outputStream = new FileOutputStream(filePath);
			byte[] bytes = text.trim().getBytes();
			outputStream.write(bytes);
			outputStream.close();
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		return "";
	}
	
	/**
	 * Get the code project path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @return                    the project path
	 */
	public static String getProjectPath(Class clazz, String projectFolderName)
	{		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		return resourcePath;
	}	
	
	/**
	 * Get the code resource path
	 * @param clazz              the instance of Class
	 * @param projectFolderName  the project folder name
	 * @return                   the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName)
	{
		return getResourcePath(clazz, projectFolderName, "src");
	}
	
	/**
	 * Get the code resource path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @param resourceFolderName  the source folder name
	 * @return                    the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName, String resourceFolderName)
	{
		String classPath = clazz.getName();
		classPath = classPath.replace('.', '/') + ".java";
		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		resourcePath = resourcePath + "/" + resourceFolderName + "/";
		
		String codePath = resourcePath + classPath;
		return codePath;
	}
}