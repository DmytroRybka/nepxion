package com.nepxion.util.io;

/**
 * <p>Title: Nepxion Utility</p>
 * <p>Description: Nepxion Utility Repository</p>
 * <p>Copyright: Copyright (c) 2010</p>
 * <p>Company: Nepxion</p>
 * @author Neptune
 * @email hj_ren@msn.com
 * @version 1.0
 */

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;

import com.nepxion.util.encode.EncodeContext;

public class FileUtil
{	
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string or exception string
	 */
	public static String readString(String filePath, boolean classLoader)
	{
		return readString(filePath, EncodeContext.getIOCharset(), classLoader);
	}
	
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath     the file path
	 * @param charset      the charset text, example "ISO-8859-1", "UTF-8", "GBK", "GB2312"
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string
	 */
	public static String readString(String filePath, String charset, boolean classLoader)
	{
		InputStream inputStream = getInputStream(filePath, classLoader);	
		return IOUtil.getString(inputStream, charset);
	}
	
	public static InputStream readBinary(String binaryURL)
		throws IOException
	{
		URL url = new URL(binaryURL);
		URLConnection urlConnection = url.openConnection();
		
		String contentType = urlConnection.getContentType();
		int contentLength = urlConnection.getContentLength();
		if (contentType.startsWith("text/") || contentLength == -1)
		{
			throw new IOException("This isn't a binary file");
		}
		
		InputStream inputStream = urlConnection.getInputStream();
		InputStream bis = new BufferedInputStream(inputStream);
		byte[] bytes = new byte[contentLength];
		int bytesRead = 0;
		int offset = 0;
		while (offset < contentLength)
		{
			bytesRead = bis.read(bytes, offset, bytes.length - offset);
			if (bytesRead == -1)
			{	
				break;
			}
			offset += bytesRead;
		}
		bis.close();
		
		if (offset != contentLength)
		{
			throw new IOException("Only " + offset + " bytes read, " + contentLength + " bytes expected");
		}
		return bis;
	}
	
	/**
	 * Write the file string.If an exception is caught,the method will return the exception for a string format
	 * @param text      the file text
	 * @param filePath  the file path
	 */
	public static void writeString(String text, String filePath)
		throws IOException, FileNotFoundException
	{
		OutputStream outputStream = new FileOutputStream(filePath);
		byte[] bytes = text.trim().getBytes();
		outputStream.write(bytes);
		outputStream.flush();
		outputStream.close();
	}
	
//	public static void writeBinary(byte[] bytes, String filePath)
//	{
//		try
//		{
//			OutputStream outputStream = new FileOutputStream(filePath);
//			
//			outputStream.write(bytes);
//			outputStream.close();
//		}
//		catch (FileNotFoundException e)
//		{
//			e.printStackTrace();
//			return e.toString();
//		}
//		catch (IOException e)
//		{
//			e.printStackTrace();
//			return e.toString();
//		}
//		return "";		
//	}
	
	/**
	 * Get InputStream
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the instance of InputStream
	 */
	public static InputStream getInputStream(String filePath, boolean classLoader)
	{
		InputStream inputStream = null;
		if (classLoader)
		{
			inputStream = FileUtil.class.getClassLoader().getResourceAsStream(filePath);
		}
		else
		{
			try
			{
				inputStream = new FileInputStream(filePath);
			}
			catch (FileNotFoundException e)
			{
				e.printStackTrace();
			}
		}
		return inputStream;
	}	
	
	/**
	 * Get the code project path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @return                    the project path
	 */
	public static String getProjectPath(Class clazz, String projectFolderName)
	{		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		return resourcePath;
	}	
	
	/**
	 * Get the code resource path
	 * @param clazz              the instance of Class
	 * @param projectFolderName  the project folder name
	 * @return                   the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName)
	{
		return getResourcePath(clazz, projectFolderName, "src");
	}
	
	/**
	 * Get the code resource path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @param resourceFolderName  the source folder name
	 * @return                    the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName, String resourceFolderName)
	{
		String classPath = clazz.getName();
		classPath = classPath.replace('.', '/') + ".java";
		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		resourcePath = resourcePath + "/" + resourceFolderName + "/";
		
		String codePath = resourcePath + classPath;
		return codePath;
	}
}