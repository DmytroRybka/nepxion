package com.nepxion.util.io;

/**
 * <p>Title: Nepxion Utility</p>
 * <p>Description: Nepxion Utility Repository</p>
 * <p>Copyright: Copyright (c) 2010</p>
 * <p>Company: Nepxion</p>
 * @author Neptune
 * @email hj_ren@msn.com
 * @version 1.0
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class FileUtil
{		
	/**
	 * Read the file string.If an exception is caught,the method will return the exception for a string format
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string or exception string
	 */
	public static String read(String filePath, boolean classLoader)
	{
		String content = "";
		try
		{
			InputStream inputStream = null;
			if (classLoader)
			{
				inputStream = FileUtil.class.getClassLoader().getResourceAsStream(filePath);
			}
			else
			{
				inputStream = new FileInputStream(filePath);
			}
			
			if (inputStream == null)
			{
				return "";
			}	
			
			int size = inputStream.available();			

			byte[] byteContent = new byte[size];
			inputStream.read(byteContent);
			
			content = new String(byteContent);
			inputStream.close();			
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			content = e.toString();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			content = e.toString();
		}
		return content;
	}
	
	/**
	 * Write the file string.If an exception is caught,the method will return the exception for a string format
	 * @param content   the file content
	 * @param filePath  the file path
	 * @return          exception string or empty string
	 */
	public static String write(String content, String filePath)
	{
		try
		{
			OutputStream outputStream = new FileOutputStream(filePath);
			byte[] b = content.trim().getBytes();
			outputStream.write(b);
			outputStream.close();			
		}
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		return "";
	}
	
	/**
	 * Get the code resource path
	 * @param c                  the instance of Class
	 * @param projectFolderName  the project folder name
	 * @return                   the code resource path        
	 */
	public static String getCodePath(Class c, String projectFolderName)
	{
		return getCodePath(c, projectFolderName, "src");
	}
	
	/**
	 * Get the code resource path
	 * @param c                   the instance of Class
	 * @param projectFolderName   the project folder name
	 * @param resourceFolderName  the source folder name
	 * @return                    the code resource path        
	 */	
	public static String getCodePath(Class c, String projectFolderName, String resourceFolderName)
	{
		String classPath = c.getName();
		classPath = classPath.replace('.', '/') + ".java";
		
		String resourcePath = c.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		resourcePath = resourcePath + "/" + resourceFolderName + "/";
		
		String codePath = resourcePath + classPath;
		return codePath;
	}
}