package com.nepxion.util.io;

/**
 * <p>Title: Nepxion Utility</p>
 * <p>Description: Nepxion Utility Repository</p>
 * <p>Copyright: Copyright (c) 2010</p>
 * <p>Company: Nepxion</p>
 * @author Neptune
 * @email hj_ren@msn.com
 * @version 1.0
 */

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import com.nepxion.util.encoder.EncoderContext;

public class FileUtil
{	
	/**
	 * Read the file string
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string
	 * @throws             IOException
	 * @throws             FileNotFoundException
	 * @throws             UnsupportedEncodingException
	 */
	public static String readString(String filePath, boolean classLoader)
		throws IOException, FileNotFoundException, UnsupportedEncodingException 
	{
		return readString(filePath, EncoderContext.getIOCharset(), classLoader);
	}
	
	/**
	 * Read the file string
	 * @param filePath     the file path
	 * @param charset      the charset text, example "ISO-8859-1", "UTF-8", "GBK", "GB2312"
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the file string
	 * @throws             IOException
	 * @throws             FileNotFoundException
	 * @throws             UnsupportedEncodingException
	 */
	public static String readString(String filePath, String charset, boolean classLoader)
		throws IOException, FileNotFoundException, UnsupportedEncodingException 
	{
		InputStream inputStream = getInputStream(filePath, classLoader);
		
		return IOUtil.getString(inputStream, charset);
	}
	
	/**
	 * Read the file bytes
	 * @param inputStream  the instance of InputStream
	 * @param bytesLength  the bytes length
	 * @return             the instance of byte[]   
	 * @throws             IOException
	 */
	public static byte[] readBytes(InputStream inputStream, int bytesLength)
		throws IOException
	{		
		InputStream bufferedInputStream = new BufferedInputStream(inputStream);
		
		byte[] bytes = new byte[bytesLength];
		int bytesRead = 0;
		int offset = 0;
		while (offset < bytesLength)
		{
			bytesRead = bufferedInputStream.read(bytes, offset, bytes.length - offset);
			if (bytesRead == -1)
			{	
				break;
			}
			offset += bytesRead;
		}
		
		bufferedInputStream.close();
		
		if (offset != bytesLength)
		{
			throw new IOException("Only " + offset + " bytes read, " + bytesLength + " bytes expected");
		}
		
		return bytes;
	}
	
	/**
	 * Read the remote bytes
	 * @param httpURL   the http url
	 * @return          the file bytes
	 * @throws          IOException
	 * @throws          MalformedURLException
	 */
	public static byte[] readRemoteBytes(String httpURL)
		throws IOException, MalformedURLException
	{
		URL url = new URL(httpURL);
		URLConnection urlConnection = url.openConnection();
		
		int contentLength = urlConnection.getContentLength();	
		if (contentLength == -1)
		{
			throw new IOException("Invalid bytes size");
		}
		
		InputStream inputStream = urlConnection.getInputStream();
		
		return readBytes(inputStream, contentLength);
	}
	
	/**
	 * Read the remote bytes length 
	 * @param httpURL   the http url
	 * @return          the file bytes
	 * @throws          IOException
	 * @throws          MalformedURLException
	 */
	public static int readRemoteBytesLength(String httpURL)
		throws IOException, MalformedURLException
	{
		URL url = new URL(httpURL);
		URLConnection urlConnection = url.openConnection();
		
		int contentLength = urlConnection.getContentLength();	
		if (contentLength == -1)
		{
			throw new IOException("Invalid bytes size");
		}
		
		return contentLength;
	}
	
	/**
	 * Write the file string
	 * @param text      the file text
	 * @param filePath  the file path
	 * @throws          IOException
	 * @throws          FileNotFoundException
	 */
	public static void writeString(String text, String filePath)
		throws IOException, FileNotFoundException
	{
		byte[] bytes = text.trim().getBytes();
		writeBytes(bytes, filePath);
	}
	
	/**
	 * Write the file bytes
	 * @param bytes     the file bytes
	 * @param filePath  the file path
	 * @throws          IOException
	 * @throws          FileNotFoundException
	 */
	public static void writeBytes(byte[] bytes, String filePath)
		throws IOException, FileNotFoundException
	{
		OutputStream outputStream = new FileOutputStream(filePath);
		outputStream.write(bytes);
		outputStream.flush();
		outputStream.close();
	}
		
	/**
	 * Get InputStream
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the instance of InputStream
	 * @throws             FileNotFoundException
	 */
	public static InputStream getInputStream(String filePath, boolean classLoader)
		throws FileNotFoundException
	{
		InputStream inputStream = null;
		if (classLoader)
		{
			inputStream = FileUtil.class.getClassLoader().getResourceAsStream(filePath);
		}
		else
		{

			inputStream = new FileInputStream(filePath);
		}
		
		return inputStream;
	}
	
	/**
	 * Get InputStream
	 * @param codeBase  the instance of URL
	 * @param filePath  the file path
	 * @return          the instance of InputStream
	 * @throws          IOException
	 * @throws          MalformedURLException
	 */
	public static InputStream getInputStream(URL codeBase, String filePath)
		throws IOException, MalformedURLException
	{
		URL url = new URL(codeBase + filePath);			
		InputStream inputStream = url.openStream();
		
		return inputStream;
	}
	
	/**
	 * Get InputStream
	 * @param codeBase     the instance of URL
	 * @param filePath     the file path
	 * @param classLoader  the flag whether the inputStream is generated by classLoader
	 * @return             the instance of InputStream
	 * @throws             IOException
	 * @throws             FileNotFoundException
	 * @throws             MalformedURLException
	 */
	public static InputStream getInputStream(URL codeBase, String filePath, boolean classLoader)
		throws IOException, FileNotFoundException, MalformedURLException
	{
		InputStream inputStream = null;
		if (codeBase != null)
		{	
			inputStream = getInputStream(codeBase, filePath);
		}
		else
		{
			inputStream = getInputStream(filePath, classLoader);
		}
		
		return inputStream;
	}
	
	/**
	 * Download file by http
	 * @param httpURL   the http url
	 * @param filePath  the file path
	 * @return          the instance of File
	 * @throws          IOException
	 * @throws          FileNotFoundException
	 */
	public static File download(String httpURL, String filePath)
		throws IOException, FileNotFoundException
	{
		File file = new File(filePath);
		
		if (file != null && file.exists())
		{	
			if (readRemoteBytesLength(httpURL) == getFileSize(file))
			{
				return file;
			}	
			else
			{
				file.delete();
			}
		}
		
		byte[] bytes = readRemoteBytes(httpURL);
		writeBytes(bytes, filePath);
		
		return file;
	}	
	
	/**
	 * Get user directory
	 * @return  the user directory
	 */
	public static String getUserDirectory()
	{
		return System.getProperty("user.dir");
	}
	
	/**
	 * Get temp directory
	 * @return  the temp directory
	 */
	public static String getTempDirectory()
	{
		return System.getProperty("java.io.tmpdir");
	}	
	
	/**
	 * Get file size
	 * @param file  the instance of File
	 * @return      the file size
	 * @throws      IOException
	 * @throws      FileNotFoundException
	 */
	public static long getFileSize(File file)
		throws IOException, FileNotFoundException
	{
		InputStream inputStream = new FileInputStream(file);
			
		return inputStream.available();
	}
	
	/**
	 * Get the code project path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @return                    the project path
	 */
	public static String getProjectPath(Class clazz, String projectFolderName)
	{		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		
		return resourcePath;
	}	
	
	/**
	 * Get the code resource path
	 * @param clazz              the instance of Class
	 * @param projectFolderName  the project folder name
	 * @return                   the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName)
	{
		return getResourcePath(clazz, projectFolderName, "src");
	}
	
	/**
	 * Get the code resource path
	 * @param clazz               the instance of Class
	 * @param projectFolderName   the project folder name
	 * @param resourceFolderName  the source folder name
	 * @return                    the code resource path
	 */
	public static String getResourcePath(Class clazz, String projectFolderName, String resourceFolderName)
	{
		String classPath = clazz.getName();
		classPath = classPath.replace('.', '/') + ".java";
		
		String resourcePath = clazz.getClassLoader().getResource("").getPath();
		resourcePath = resourcePath.substring(1);
		resourcePath = resourcePath.substring(0, resourcePath.indexOf(projectFolderName) + projectFolderName.length());
		resourcePath = resourcePath + "/" + resourceFolderName + "/";
		
		String codePath = resourcePath + classPath;
		
		return codePath;
	}
}