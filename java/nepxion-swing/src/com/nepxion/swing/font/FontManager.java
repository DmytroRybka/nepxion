package com.nepxion.swing.font;

/**
 * <p>Title: Nepxion Swing</p>
 * <p>Description: Nepxion Swing Repository</p>
 * <p>Copyright: Copyright (c) 2010</p>
 * <p>Company: Nepxion</p>
 * @author Neptune
 * @email hj_ren@msn.com
 * @version 1.0
 */

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.geom.Rectangle2D;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Locale;

import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

import com.nepxion.util.io.FileUtil;

public class FontManager
{
	public static final String SWING_FONT_FOLDER = "com/nepxion/swing/font/";
		
	/**
	 * Sets the font.
	 * @param fontName the font name string
	 * @param fontStyle the font style value
	 * @param fontSize the font size value
	 */
	public static void setFont(String fontName, int fontStyle, int fontSize)
	{
		Font font = new Font(fontName, fontStyle, fontSize);

		setFont(font);
	}
		
	/**
	 * Sets the font.
	 * @param font the instance of Font
	 */
	public static void setFont(Font font)
	{		
		FontUIResource fontUIResource = new FontUIResource(font);
		for (Enumeration enumeration = UIManager.getDefaults().keys(); enumeration.hasMoreElements();)
		{
			Object key = enumeration.nextElement();
			Object value = UIManager.get(key);
			if (value instanceof FontUIResource)
			{
				UIManager.getDefaults().remove(key);
				UIManager.getDefaults().put(key, fontUIResource);
			}
		}
	}
	
	/**
	 * Sets the font with an inputStream from a font file.
	 * @param fontFileName the font file name string
	 * @param fontStyle the font style value
	 * @param fontSize the font size value
	 */
	public static void setInputStreamFont(String fontFileName, int fontStyle, int fontSize)
	{
		setInputStreamFont(fontFileName, fontStyle, fontSize, true);
	}
	
	/**
	 * Sets the font with an inputStream from a font file.
	 * @param fontFileName the font file name string
	 * @param fontStyle the font style value
	 * @param fontSize the font size value
	 * @param classLoader classLoader the boolean value whether the inputStream is generated by the classLoader or not
	 */
	public static void setInputStreamFont(String fontFileName, int fontStyle, int fontSize, boolean classLoader)
	{
		Font font = null;
		String fontPath = SWING_FONT_FOLDER + fontFileName;
		try
		{
			InputStream inputStream = FileUtil.getInputStream(fontPath, classLoader);
			font = Font.createFont(Font.TRUETYPE_FONT, inputStream);
			font = font.deriveFont(fontStyle, fontSize);
			inputStream.close();
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
			font = FontContext.getFont();
		}
		
		setFont(font);
	}
	
	/**
	 * Gets all fonts.
	 * @return the font array
	 */
	public static Font[] getAllFonts()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
	}
	
	/**
	 * Gets all available font family names
	 * @return the font name array
	 */
	public static String[] getAvailableFontFamilyNames()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
	}
	
	/**
	 * Gets all available font family names by a locale.
	 * @param locale the instance of Locale
	 * @return the font name array
	 */
	public static String[] getAvailableFontFamilyNames(Locale locale)
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames(locale);
	}
	
	/**
	 * Draw string at the component center position vertically and horizontally. 
	 * @param g the instance of Graphics
	 * @param font the instance of Font
	 * @param text the text string
	 * @param componentWidth the component width
	 * @param componentHeight the component height
	 */
	public static void drawCenterString(Graphics g, Font font, String text, int componentWidth, int componentHeight)
	{
		FontMetrics fontMetrics = g.getFontMetrics(font);
		Rectangle2D r = fontMetrics.getStringBounds(text, g);
		
		int textWidth = (int) r.getWidth();
		int textHeight = (int) r.getHeight();
		
		int x = (componentWidth - textWidth) / 2;
		int y = (componentHeight - textHeight) / 2 + fontMetrics.getAscent();
		
		g.drawString(text, x, y);
	}
}